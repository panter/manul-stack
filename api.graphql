### This file was generated by Nexus Schema
### Do not make changes to this file directly


type BatchPayload {
  count: Int!
}

type BlogPost {
  author: User!
  content: Json
  id: String!
  published: Boolean!
  title: String!
}

input BlogPostCreateInput {
  author: UserCreateOneWithoutBlogPostsInput!
  content: String
  id: String
  published: Boolean
  title: String!
}

input BlogPostCreateManyWithoutAuthorInput {
  connect: [BlogPostWhereUniqueInput!]
  connectOrCreate: [BlogPostCreateOrConnectWithoutUserInput!]
  create: [BlogPostCreateWithoutAuthorInput!]
}

input BlogPostCreateOrConnectWithoutUserInput {
  create: BlogPostCreateWithoutAuthorInput!
  where: BlogPostWhereUniqueInput!
}

input BlogPostCreateWithoutAuthorInput {
  content: String
  id: String
  published: Boolean
  title: String!
}

input BlogPostFilter {
  every: BlogPostWhereInput
  none: BlogPostWhereInput
  some: BlogPostWhereInput
}

input BlogPostOrderByInput {
  authorId: SortOrder
  content: SortOrder
  id: SortOrder
  published: SortOrder
  title: SortOrder
}

input BlogPostScalarWhereInput {
  AND: [BlogPostScalarWhereInput!]
  authorId: StringFilter
  content: NullableStringFilter
  id: UUIDFilter
  NOT: [BlogPostScalarWhereInput!]
  OR: [BlogPostScalarWhereInput!]
  published: BooleanFilter
  title: StringFilter
}

input BlogPostUpdateInput {
  author: UserUpdateOneRequiredWithoutBlogPostsInput
  content: String
  id: String
  published: Boolean
  title: String
}

input BlogPostUpdateManyDataInput {
  content: String
  id: String
  published: Boolean
  title: String
}

input BlogPostUpdateManyMutationInput {
  content: String
  id: String
  published: Boolean
  title: String
}

input BlogPostUpdateManyWithoutAuthorInput {
  connect: [BlogPostWhereUniqueInput!]
  connectOrCreate: [BlogPostCreateOrConnectWithoutUserInput!]
  create: [BlogPostCreateWithoutAuthorInput!]
  delete: [BlogPostWhereUniqueInput!]
  deleteMany: [BlogPostScalarWhereInput!]
  disconnect: [BlogPostWhereUniqueInput!]
  set: [BlogPostWhereUniqueInput!]
  update: [BlogPostUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [BlogPostUpdateManyWithWhereNestedInput!]
  upsert: [BlogPostUpsertWithWhereUniqueWithoutAuthorInput!]
}

input BlogPostUpdateManyWithWhereNestedInput {
  data: BlogPostUpdateManyDataInput!
  where: BlogPostScalarWhereInput!
}

input BlogPostUpdateWithoutAuthorDataInput {
  content: String
  id: String
  published: Boolean
  title: String
}

input BlogPostUpdateWithWhereUniqueWithoutAuthorInput {
  data: BlogPostUpdateWithoutAuthorDataInput!
  where: BlogPostWhereUniqueInput!
}

input BlogPostUpsertWithWhereUniqueWithoutAuthorInput {
  create: BlogPostCreateWithoutAuthorInput!
  update: BlogPostUpdateWithoutAuthorDataInput!
  where: BlogPostWhereUniqueInput!
}

input BlogPostWhereInput {
  AND: [BlogPostWhereInput!]
  author: UserWhereInput
  authorId: StringFilter
  content: NullableStringFilter
  id: UUIDFilter
  NOT: [BlogPostWhereInput!]
  OR: [BlogPostWhereInput!]
  published: BooleanFilter
  title: StringFilter
}

input BlogPostWhereUniqueInput {
  id: String
}

input BooleanFilter {
  equals: Boolean
  not: Boolean
}

type Cart {
  cartItems(cursor: CartItemWhereUniqueInput, skip: Int, take: Int): [CartItem!]!
  created: DateTime!
  id: String!
  user: User
}

input CartCreateOneWithoutCartItemsInput {
  connect: CartWhereUniqueInput
  connectOrCreate: CartCreateOrConnectWithoutCartItemInput
  create: CartCreateWithoutCartItemsInput
}

input CartCreateOneWithoutUserInput {
  connect: CartWhereUniqueInput
  connectOrCreate: CartCreateOrConnectWithoutUserInput
  create: CartCreateWithoutUserInput
}

input CartCreateOrConnectWithoutCartItemInput {
  create: CartCreateWithoutCartItemsInput!
  where: CartWhereUniqueInput!
}

input CartCreateOrConnectWithoutUserInput {
  create: CartCreateWithoutUserInput!
  where: CartWhereUniqueInput!
}

input CartCreateWithoutCartItemsInput {
  created: DateTime
  id: String
  user: UserCreateOneWithoutCartInput
}

input CartCreateWithoutUserInput {
  cartItems: CartItemCreateManyWithoutCartInput
  created: DateTime
  id: String
}

type CartItem {
  cart: Cart!
  id: String!
  product: Product!
}

input CartItemCreateManyWithoutCartInput {
  connect: [CartItemWhereUniqueInput!]
  connectOrCreate: [CartItemCreateOrConnectWithoutCartInput!]
  create: [CartItemCreateWithoutCartInput!]
}

input CartItemCreateManyWithoutProductInput {
  connect: [CartItemWhereUniqueInput!]
  connectOrCreate: [CartItemCreateOrConnectWithoutProductInput!]
  create: [CartItemCreateWithoutProductInput!]
}

input CartItemCreateOrConnectWithoutCartInput {
  create: CartItemCreateWithoutCartInput!
  where: CartItemWhereUniqueInput!
}

input CartItemCreateOrConnectWithoutProductInput {
  create: CartItemCreateWithoutProductInput!
  where: CartItemWhereUniqueInput!
}

input CartItemCreateWithoutCartInput {
  id: String
  product: ProductCreateOneWithoutCartItemsInput!
  quantity: Int
}

input CartItemCreateWithoutProductInput {
  cart: CartCreateOneWithoutCartItemsInput!
  id: String
  quantity: Int
}

input CartItemFilter {
  every: CartItemWhereInput
  none: CartItemWhereInput
  some: CartItemWhereInput
}

input CartItemScalarWhereInput {
  AND: [CartItemScalarWhereInput!]
  cartId: StringFilter
  id: UUIDFilter
  NOT: [CartItemScalarWhereInput!]
  OR: [CartItemScalarWhereInput!]
  productId: StringFilter
  quantity: IntFilter
}

input CartItemUpdateManyDataInput {
  id: String
  quantity: Int
}

input CartItemUpdateManyWithoutCartInput {
  connect: [CartItemWhereUniqueInput!]
  connectOrCreate: [CartItemCreateOrConnectWithoutCartInput!]
  create: [CartItemCreateWithoutCartInput!]
  delete: [CartItemWhereUniqueInput!]
  deleteMany: [CartItemScalarWhereInput!]
  disconnect: [CartItemWhereUniqueInput!]
  set: [CartItemWhereUniqueInput!]
  update: [CartItemUpdateWithWhereUniqueWithoutCartInput!]
  updateMany: [CartItemUpdateManyWithWhereNestedInput!]
  upsert: [CartItemUpsertWithWhereUniqueWithoutCartInput!]
}

input CartItemUpdateManyWithoutProductInput {
  connect: [CartItemWhereUniqueInput!]
  connectOrCreate: [CartItemCreateOrConnectWithoutProductInput!]
  create: [CartItemCreateWithoutProductInput!]
  delete: [CartItemWhereUniqueInput!]
  deleteMany: [CartItemScalarWhereInput!]
  disconnect: [CartItemWhereUniqueInput!]
  set: [CartItemWhereUniqueInput!]
  update: [CartItemUpdateWithWhereUniqueWithoutProductInput!]
  updateMany: [CartItemUpdateManyWithWhereNestedInput!]
  upsert: [CartItemUpsertWithWhereUniqueWithoutProductInput!]
}

input CartItemUpdateManyWithWhereNestedInput {
  data: CartItemUpdateManyDataInput!
  where: CartItemScalarWhereInput!
}

input CartItemUpdateWithoutCartDataInput {
  id: String
  product: ProductUpdateOneRequiredWithoutCartItemsInput
  quantity: Int
}

input CartItemUpdateWithoutProductDataInput {
  cart: CartUpdateOneRequiredWithoutCartItemsInput
  id: String
  quantity: Int
}

input CartItemUpdateWithWhereUniqueWithoutCartInput {
  data: CartItemUpdateWithoutCartDataInput!
  where: CartItemWhereUniqueInput!
}

input CartItemUpdateWithWhereUniqueWithoutProductInput {
  data: CartItemUpdateWithoutProductDataInput!
  where: CartItemWhereUniqueInput!
}

input CartItemUpsertWithWhereUniqueWithoutCartInput {
  create: CartItemCreateWithoutCartInput!
  update: CartItemUpdateWithoutCartDataInput!
  where: CartItemWhereUniqueInput!
}

input CartItemUpsertWithWhereUniqueWithoutProductInput {
  create: CartItemCreateWithoutProductInput!
  update: CartItemUpdateWithoutProductDataInput!
  where: CartItemWhereUniqueInput!
}

input CartItemWhereInput {
  AND: [CartItemWhereInput!]
  cart: CartWhereInput
  cartId: StringFilter
  id: UUIDFilter
  NOT: [CartItemWhereInput!]
  OR: [CartItemWhereInput!]
  product: ProductWhereInput
  productId: StringFilter
  quantity: IntFilter
}

input CartItemWhereUniqueInput {
  id: String
}

input CartUpdateOneRequiredWithoutCartItemsInput {
  connect: CartWhereUniqueInput
  connectOrCreate: CartCreateOrConnectWithoutCartItemInput
  create: CartCreateWithoutCartItemsInput
  update: CartUpdateWithoutCartItemsDataInput
  upsert: CartUpsertWithoutCartItemsInput
}

input CartUpdateOneWithoutUserInput {
  connect: CartWhereUniqueInput
  connectOrCreate: CartCreateOrConnectWithoutUserInput
  create: CartCreateWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  update: CartUpdateWithoutUserDataInput
  upsert: CartUpsertWithoutUserInput
}

input CartUpdateWithoutCartItemsDataInput {
  created: DateTime
  id: String
  user: UserUpdateOneWithoutCartInput
}

input CartUpdateWithoutUserDataInput {
  cartItems: CartItemUpdateManyWithoutCartInput
  created: DateTime
  id: String
}

input CartUpsertWithoutCartItemsInput {
  create: CartCreateWithoutCartItemsInput!
  update: CartUpdateWithoutCartItemsDataInput!
}

input CartUpsertWithoutUserInput {
  create: CartCreateWithoutUserInput!
  update: CartUpdateWithoutUserDataInput!
}

input CartWhereInput {
  AND: [CartWhereInput!]
  cartItems: CartItemFilter
  created: DateTimeFilter
  id: UUIDFilter
  NOT: [CartWhereInput!]
  OR: [CartWhereInput!]
  user: UserWhereInput
  userId: NullableStringFilter
}

input CartWhereUniqueInput {
  id: String
  userId: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

"""
The `JSON` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json

type LoginResult {
  user: User
}

type Mutation {
  addToCart(product: ProductWhereUniqueInput, quantity: Int): Cart
  adminCreateOneBlogPost(data: BlogPostCreateInput!): BlogPost!
  adminCreateOnePage(data: PageCreateInput!): Page!
  adminCreateOneProduct(data: ProductCreateInput!): Product!
  adminCreateOneUser(data: UserCreateInput!): User!
  adminCreateOneUserRole(data: UserRoleCreateInput!): UserRole!
  adminDeleteManyBlogPost(where: BlogPostWhereInput): BatchPayload!
  adminDeleteManyPage(where: PageWhereInput): BatchPayload!
  adminDeleteManyProduct(where: ProductWhereInput): BatchPayload!
  adminDeleteManyUser(where: UserWhereInput): BatchPayload!
  adminDeleteManyUserRole(where: UserRoleWhereInput): BatchPayload!
  adminDeleteOneBlogPost(where: BlogPostWhereUniqueInput!): BlogPost
  adminDeleteOnePage(where: PageWhereUniqueInput!): Page
  adminDeleteOneProduct(where: ProductWhereUniqueInput!): Product
  adminDeleteOneUser(where: UserWhereUniqueInput!): User
  adminDeleteOneUserRole(where: UserRoleWhereUniqueInput!): UserRole
  adminUpdateManyBlogPost(data: BlogPostUpdateManyMutationInput!, where: BlogPostWhereInput): BatchPayload!
  adminUpdateManyPage(data: PageUpdateManyMutationInput!, where: PageWhereInput): BatchPayload!
  adminUpdateManyProduct(data: ProductUpdateManyMutationInput!, where: ProductWhereInput): BatchPayload!
  adminUpdateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  adminUpdateManyUserRole(data: UserRoleUpdateManyMutationInput!, where: UserRoleWhereInput): BatchPayload!
  adminUpdateOneBlogPost(data: BlogPostUpdateInput!, where: BlogPostWhereUniqueInput!): BlogPost
  adminUpdateOnePage(data: PageUpdateInput!, where: PageWhereUniqueInput!): Page
  adminUpdateOneProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  adminUpdateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  adminUpdateOneUserRole(data: UserRoleUpdateInput!, where: UserRoleWhereUniqueInput!): UserRole
  adminUploadFile(file: Upload, fileName: String, folderName: String): String
  adminUpsertOneBlogPost(create: BlogPostCreateInput!, update: BlogPostUpdateInput!, where: BlogPostWhereUniqueInput!): BlogPost!
  adminUpsertOnePage(create: PageCreateInput!, update: PageUpdateInput!, where: PageWhereUniqueInput!): Page!
  adminUpsertOneProduct(create: ProductCreateInput!, update: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product!
  adminUpsertOneUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  adminUpsertOneUserRole(create: UserRoleCreateInput!, update: UserRoleUpdateInput!, where: UserRoleWhereUniqueInput!): UserRole!
  login(email: String!, password: String!): LoginResult
  logout: Boolean
  signup(email: String!, password: String!): SignupResult
}

input NullableBooleanFilter {
  equals: Boolean
  not: Boolean
}

input NullableIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Page {
  childPages(cursor: PageWhereUniqueInput, orderBy: [PageOrderByInput!], skip: Int, take: Int): [Page!]!
  content: Json
  htmlTitle: String!
  htmlTitle_de: String
  htmlTitle_en: String
  id: String!
  meta_description: String!
  meta_description_de: String
  meta_description_en: String
  navigationTitle: String!
  navigationTitle_de: String
  navigationTitle_en: String
  parentPage: Page
  path: String
  published: Boolean
  slug: String!
  social_description: String!
  social_description_de: String
  social_description_en: String
  social_title: String!
  social_title_de: String
  social_title_en: String
  sortKey: Int
}

input PageCreateInput {
  childPages: PageCreateManyWithoutParentPageInput
  content: String
  createdAt: DateTime
  htmlTitle_de: String
  htmlTitle_en: String
  id: String
  meta_description_de: String
  meta_description_en: String
  navigationTitle_de: String
  navigationTitle_en: String!
  parentPage: PageCreateOneWithoutChildPagesInput
  published: Boolean
  slug: String!
  social_description_de: String
  social_description_en: String
  social_title_de: String
  social_title_en: String
  sortKey: Int
}

input PageCreateManyWithoutParentPageInput {
  connect: [PageWhereUniqueInput!]
  connectOrCreate: [PageCreateOrConnectWithoutPageInput!]
  create: [PageCreateWithoutParentPageInput!]
}

input PageCreateOneWithoutChildPagesInput {
  connect: PageWhereUniqueInput
  connectOrCreate: PageCreateOrConnectWithoutPageInput
  create: PageCreateWithoutChildPagesInput
}

input PageCreateOrConnectWithoutPageInput {
  create: PageCreateWithoutChildPagesInput!
  where: PageWhereUniqueInput!
}

input PageCreateWithoutChildPagesInput {
  content: String
  createdAt: DateTime
  htmlTitle_de: String
  htmlTitle_en: String
  id: String
  meta_description_de: String
  meta_description_en: String
  navigationTitle_de: String
  navigationTitle_en: String!
  parentPage: PageCreateOneWithoutChildPagesInput
  path: String
  published: Boolean
  slug: String!
  social_description_de: String
  social_description_en: String
  social_title_de: String
  social_title_en: String
  sortKey: Int
}

input PageCreateWithoutParentPageInput {
  childPages: PageCreateManyWithoutParentPageInput
  content: String
  createdAt: DateTime
  htmlTitle_de: String
  htmlTitle_en: String
  id: String
  meta_description_de: String
  meta_description_en: String
  navigationTitle_de: String
  navigationTitle_en: String!
  path: String
  published: Boolean
  slug: String!
  social_description_de: String
  social_description_en: String
  social_title_de: String
  social_title_en: String
  sortKey: Int
}

input PageFilter {
  every: PageWhereInput
  none: PageWhereInput
  some: PageWhereInput
}

input PageOrderByInput {
  content: SortOrder
  createdAt: SortOrder
  htmlTitle_de: SortOrder
  htmlTitle_en: SortOrder
  id: SortOrder
  meta_description_de: SortOrder
  meta_description_en: SortOrder
  navigationTitle_de: SortOrder
  navigationTitle_en: SortOrder
  parentPageId: SortOrder
  path: SortOrder
  published: SortOrder
  slug: SortOrder
  social_description_de: SortOrder
  social_description_en: SortOrder
  social_title_de: SortOrder
  social_title_en: SortOrder
  sortKey: SortOrder
}

input PageScalarWhereInput {
  AND: [PageScalarWhereInput!]
  childPages: PageFilter
  content: NullableStringFilter
  createdAt: DateTimeFilter
  htmlTitle_de: NullableStringFilter
  htmlTitle_en: NullableStringFilter
  id: UUIDFilter
  meta_description_de: NullableStringFilter
  meta_description_en: NullableStringFilter
  navigationTitle_de: NullableStringFilter
  navigationTitle_en: StringFilter
  NOT: [PageScalarWhereInput!]
  OR: [PageScalarWhereInput!]
  parentPageId: NullableStringFilter
  path: NullableStringFilter
  published: NullableBooleanFilter
  slug: StringFilter
  social_description_de: NullableStringFilter
  social_description_en: NullableStringFilter
  social_title_de: NullableStringFilter
  social_title_en: NullableStringFilter
  sortKey: NullableIntFilter
}

input PageUpdateInput {
  childPages: PageUpdateManyWithoutParentPageInput
  content: String
  createdAt: DateTime
  htmlTitle_de: String
  htmlTitle_en: String
  id: String
  meta_description_de: String
  meta_description_en: String
  navigationTitle_de: String
  navigationTitle_en: String
  parentPage: PageUpdateOneWithoutChildPagesInput
  published: Boolean
  slug: String
  social_description_de: String
  social_description_en: String
  social_title_de: String
  social_title_en: String
  sortKey: Int
}

input PageUpdateManyDataInput {
  content: String
  createdAt: DateTime
  htmlTitle_de: String
  htmlTitle_en: String
  id: String
  meta_description_de: String
  meta_description_en: String
  navigationTitle_de: String
  navigationTitle_en: String
  path: String
  published: Boolean
  slug: String
  social_description_de: String
  social_description_en: String
  social_title_de: String
  social_title_en: String
  sortKey: Int
}

input PageUpdateManyMutationInput {
  content: String
  createdAt: DateTime
  htmlTitle_de: String
  htmlTitle_en: String
  id: String
  meta_description_de: String
  meta_description_en: String
  navigationTitle_de: String
  navigationTitle_en: String
  path: String
  published: Boolean
  slug: String
  social_description_de: String
  social_description_en: String
  social_title_de: String
  social_title_en: String
  sortKey: Int
}

input PageUpdateManyWithoutParentPageInput {
  connect: [PageWhereUniqueInput!]
  connectOrCreate: [PageCreateOrConnectWithoutPageInput!]
  create: [PageCreateWithoutParentPageInput!]
  delete: [PageWhereUniqueInput!]
  deleteMany: [PageScalarWhereInput!]
  disconnect: [PageWhereUniqueInput!]
  set: [PageWhereUniqueInput!]
  update: [PageUpdateWithWhereUniqueWithoutParentPageInput!]
  updateMany: [PageUpdateManyWithWhereNestedInput!]
  upsert: [PageUpsertWithWhereUniqueWithoutParentPageInput!]
}

input PageUpdateManyWithWhereNestedInput {
  data: PageUpdateManyDataInput!
  where: PageScalarWhereInput!
}

input PageUpdateOneWithoutChildPagesInput {
  connect: PageWhereUniqueInput
  connectOrCreate: PageCreateOrConnectWithoutPageInput
  create: PageCreateWithoutChildPagesInput
  delete: Boolean
  disconnect: Boolean
  update: PageUpdateWithoutChildPagesDataInput
  upsert: PageUpsertWithoutChildPagesInput
}

input PageUpdateWithoutChildPagesDataInput {
  content: String
  createdAt: DateTime
  htmlTitle_de: String
  htmlTitle_en: String
  id: String
  meta_description_de: String
  meta_description_en: String
  navigationTitle_de: String
  navigationTitle_en: String
  parentPage: PageUpdateOneWithoutChildPagesInput
  path: String
  published: Boolean
  slug: String
  social_description_de: String
  social_description_en: String
  social_title_de: String
  social_title_en: String
  sortKey: Int
}

input PageUpdateWithoutParentPageDataInput {
  childPages: PageUpdateManyWithoutParentPageInput
  content: String
  createdAt: DateTime
  htmlTitle_de: String
  htmlTitle_en: String
  id: String
  meta_description_de: String
  meta_description_en: String
  navigationTitle_de: String
  navigationTitle_en: String
  path: String
  published: Boolean
  slug: String
  social_description_de: String
  social_description_en: String
  social_title_de: String
  social_title_en: String
  sortKey: Int
}

input PageUpdateWithWhereUniqueWithoutParentPageInput {
  data: PageUpdateWithoutParentPageDataInput!
  where: PageWhereUniqueInput!
}

input PageUpsertWithoutChildPagesInput {
  create: PageCreateWithoutChildPagesInput!
  update: PageUpdateWithoutChildPagesDataInput!
}

input PageUpsertWithWhereUniqueWithoutParentPageInput {
  create: PageCreateWithoutParentPageInput!
  update: PageUpdateWithoutParentPageDataInput!
  where: PageWhereUniqueInput!
}

input PageWhereInput {
  AND: [PageWhereInput!]
  childPages: PageFilter
  content: NullableStringFilter
  createdAt: DateTimeFilter
  htmlTitle_de: NullableStringFilter
  htmlTitle_en: NullableStringFilter
  id: UUIDFilter
  meta_description_de: NullableStringFilter
  meta_description_en: NullableStringFilter
  navigationTitle_de: NullableStringFilter
  navigationTitle_en: StringFilter
  NOT: [PageWhereInput!]
  OR: [PageWhereInput!]
  parentPage: PageWhereInput
  parentPageId: NullableStringFilter
  path: NullableStringFilter
  published: NullableBooleanFilter
  slug: StringFilter
  social_description_de: NullableStringFilter
  social_description_en: NullableStringFilter
  social_title_de: NullableStringFilter
  social_title_en: NullableStringFilter
  sortKey: NullableIntFilter
}

input PageWhereUniqueInput {
  id: String
  parentPageId_slug: ParentPageIdSlugCompoundUniqueInput
  path: String
}

input ParentPageIdSlugCompoundUniqueInput {
  parentPageId: String!
  slug: String!
}

type Product {
  id: String!
  imageUrl: String!
  slug: String!
  title: String!
}

input ProductCreateInput {
  cartItems: CartItemCreateManyWithoutProductInput
  id: String
  imageUrl: String!
  slug: String!
  title: String!
}

input ProductCreateOneWithoutCartItemsInput {
  connect: ProductWhereUniqueInput
  connectOrCreate: ProductCreateOrConnectWithoutCartItemInput
  create: ProductCreateWithoutCartItemsInput
}

input ProductCreateOrConnectWithoutCartItemInput {
  create: ProductCreateWithoutCartItemsInput!
  where: ProductWhereUniqueInput!
}

input ProductCreateWithoutCartItemsInput {
  id: String
  imageUrl: String!
  slug: String!
  title: String!
}

input ProductOrderByInput {
  id: SortOrder
  imageUrl: SortOrder
  slug: SortOrder
  title: SortOrder
}

input ProductUpdateInput {
  cartItems: CartItemUpdateManyWithoutProductInput
  id: String
  imageUrl: String
  slug: String
  title: String
}

input ProductUpdateManyMutationInput {
  id: String
  imageUrl: String
  slug: String
  title: String
}

input ProductUpdateOneRequiredWithoutCartItemsInput {
  connect: ProductWhereUniqueInput
  connectOrCreate: ProductCreateOrConnectWithoutCartItemInput
  create: ProductCreateWithoutCartItemsInput
  update: ProductUpdateWithoutCartItemsDataInput
  upsert: ProductUpsertWithoutCartItemsInput
}

input ProductUpdateWithoutCartItemsDataInput {
  id: String
  imageUrl: String
  slug: String
  title: String
}

input ProductUpsertWithoutCartItemsInput {
  create: ProductCreateWithoutCartItemsInput!
  update: ProductUpdateWithoutCartItemsDataInput!
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  cartItems: CartItemFilter
  id: UUIDFilter
  imageUrl: StringFilter
  NOT: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  slug: StringFilter
  title: StringFilter
}

input ProductWhereUniqueInput {
  id: String
  slug: String
}

type Query {
  adminBlogPost(where: BlogPostWhereUniqueInput!): BlogPost
  adminBlogPosts(cursor: BlogPostWhereUniqueInput, orderBy: [BlogPostOrderByInput!], skip: Int, take: Int, where: BlogPostWhereInput): [BlogPost!]!
  adminBlogPostsCount(cursor: BlogPostWhereUniqueInput, orderBy: BlogPostOrderByInput, skip: Int, take: Int, where: BlogPostWhereInput): Int
  adminPage(where: PageWhereUniqueInput!): Page
  adminPages(cursor: PageWhereUniqueInput, orderBy: [PageOrderByInput!], skip: Int, take: Int, where: PageWhereInput): [Page!]!
  adminPagesCount(cursor: PageWhereUniqueInput, orderBy: PageOrderByInput, skip: Int, take: Int, where: PageWhereInput): Int
  adminProduct(where: ProductWhereUniqueInput!): Product
  adminProducts(cursor: ProductWhereUniqueInput, orderBy: [ProductOrderByInput!], skip: Int, take: Int, where: ProductWhereInput): [Product!]!
  adminProductsCount(cursor: ProductWhereUniqueInput, orderBy: ProductOrderByInput, skip: Int, take: Int, where: ProductWhereInput): Int
  adminUser(where: UserWhereUniqueInput!): User
  adminUserRole(where: UserRoleWhereUniqueInput!): UserRole
  adminUserRoles(cursor: UserRoleWhereUniqueInput, orderBy: [UserRoleOrderByInput!], skip: Int, take: Int, where: UserRoleWhereInput): [UserRole!]!
  adminUserRolesCount(cursor: UserRoleWhereUniqueInput, orderBy: UserRoleOrderByInput, skip: Int, take: Int, where: UserRoleWhereInput): Int
  adminUsers(cursor: UserWhereUniqueInput, orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
  adminUsersCount(cursor: UserWhereUniqueInput, orderBy: UserOrderByInput, skip: Int, take: Int, where: UserWhereInput): Int
  blogPosts(cursor: BlogPostWhereUniqueInput, skip: Int, take: Int, where: BlogPostWhereInput): [BlogPost!]!
  me: User
  page(pageId: String, path: String): Page
  pages(parentPageId: String, parentPath: String): [Page!]
  products(cursor: ProductWhereUniqueInput, skip: Int, take: Int, where: ProductWhereInput): [Product!]!
}

type SignupResult {
  user: User
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  blogPosts(cursor: BlogPostWhereUniqueInput, skip: Int, take: Int): [BlogPost!]!
  email: String!
  id: String!
  roles(cursor: UserRoleWhereUniqueInput, skip: Int, take: Int): [UserRole!]!
}

input UserCreateInput {
  blogPosts: BlogPostCreateManyWithoutAuthorInput
  cart: CartCreateOneWithoutUserInput
  email: String!
  id: String
  password: String!
  roles: UserRoleCreateManyWithoutUsersInput
}

input UserCreateManyWithoutRolesInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutUserRoleInput!]
  create: [UserCreateWithoutRolesInput!]
}

input UserCreateOneWithoutBlogPostsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutBlogPostInput
  create: UserCreateWithoutBlogPostsInput
}

input UserCreateOneWithoutCartInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCartInput
  create: UserCreateWithoutCartInput
}

input UserCreateOrConnectWithoutBlogPostInput {
  create: UserCreateWithoutBlogPostsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutCartInput {
  create: UserCreateWithoutCartInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutUserRoleInput {
  create: UserCreateWithoutRolesInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutBlogPostsInput {
  cart: CartCreateOneWithoutUserInput
  email: String!
  id: String
  password: String!
  roles: UserRoleCreateManyWithoutUsersInput
}

input UserCreateWithoutCartInput {
  blogPosts: BlogPostCreateManyWithoutAuthorInput
  email: String!
  id: String
  password: String!
  roles: UserRoleCreateManyWithoutUsersInput
}

input UserCreateWithoutRolesInput {
  blogPosts: BlogPostCreateManyWithoutAuthorInput
  cart: CartCreateOneWithoutUserInput
  email: String!
  id: String
  password: String!
}

input UserFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserOrderByInput {
  email: SortOrder
  id: SortOrder
  password: SortOrder
}

type UserRole {
  id: String!
  users(cursor: UserWhereUniqueInput, skip: Int, take: Int): [User!]!
}

input UserRoleCreateInput {
  id: String!
  users: UserCreateManyWithoutRolesInput
}

input UserRoleCreateManyWithoutUsersInput {
  connect: [UserRoleWhereUniqueInput!]
  connectOrCreate: [UserRoleCreateOrConnectWithoutUserInput!]
  create: [UserRoleCreateWithoutUsersInput!]
}

input UserRoleCreateOrConnectWithoutUserInput {
  create: UserRoleCreateWithoutUsersInput!
  where: UserRoleWhereUniqueInput!
}

input UserRoleCreateWithoutUsersInput {
  id: String!
}

input UserRoleFilter {
  every: UserRoleWhereInput
  none: UserRoleWhereInput
  some: UserRoleWhereInput
}

input UserRoleOrderByInput {
  id: SortOrder
}

input UserRoleScalarWhereInput {
  AND: [UserRoleScalarWhereInput!]
  id: StringFilter
  NOT: [UserRoleScalarWhereInput!]
  OR: [UserRoleScalarWhereInput!]
  users: UserFilter
}

input UserRoleUpdateInput {
  id: String
  users: UserUpdateManyWithoutRolesInput
}

input UserRoleUpdateManyDataInput {
  id: String
}

input UserRoleUpdateManyMutationInput {
  id: String
}

input UserRoleUpdateManyWithoutUsersInput {
  connect: [UserRoleWhereUniqueInput!]
  connectOrCreate: [UserRoleCreateOrConnectWithoutUserInput!]
  create: [UserRoleCreateWithoutUsersInput!]
  delete: [UserRoleWhereUniqueInput!]
  deleteMany: [UserRoleScalarWhereInput!]
  disconnect: [UserRoleWhereUniqueInput!]
  set: [UserRoleWhereUniqueInput!]
  update: [UserRoleUpdateWithWhereUniqueWithoutUsersInput!]
  updateMany: [UserRoleUpdateManyWithWhereNestedInput!]
  upsert: [UserRoleUpsertWithWhereUniqueWithoutUsersInput!]
}

input UserRoleUpdateManyWithWhereNestedInput {
  data: UserRoleUpdateManyDataInput!
  where: UserRoleScalarWhereInput!
}

input UserRoleUpdateWithoutUsersDataInput {
  id: String
}

input UserRoleUpdateWithWhereUniqueWithoutUsersInput {
  data: UserRoleUpdateWithoutUsersDataInput!
  where: UserRoleWhereUniqueInput!
}

input UserRoleUpsertWithWhereUniqueWithoutUsersInput {
  create: UserRoleCreateWithoutUsersInput!
  update: UserRoleUpdateWithoutUsersDataInput!
  where: UserRoleWhereUniqueInput!
}

input UserRoleWhereInput {
  AND: [UserRoleWhereInput!]
  id: StringFilter
  NOT: [UserRoleWhereInput!]
  OR: [UserRoleWhereInput!]
  users: UserFilter
}

input UserRoleWhereUniqueInput {
  id: String
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput!]
  blogPosts: BlogPostFilter
  email: StringFilter
  id: UUIDFilter
  NOT: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  password: StringFilter
  roles: UserRoleFilter
}

input UserUpdateInput {
  blogPosts: BlogPostUpdateManyWithoutAuthorInput
  cart: CartUpdateOneWithoutUserInput
  email: String
  id: String
  password: String
  roles: UserRoleUpdateManyWithoutUsersInput
}

input UserUpdateManyDataInput {
  email: String
  id: String
  password: String
}

input UserUpdateManyMutationInput {
  email: String
  id: String
  password: String
}

input UserUpdateManyWithoutRolesInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutUserRoleInput!]
  create: [UserCreateWithoutRolesInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutRolesInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutRolesInput!]
}

input UserUpdateManyWithWhereNestedInput {
  data: UserUpdateManyDataInput!
  where: UserScalarWhereInput!
}

input UserUpdateOneRequiredWithoutBlogPostsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutBlogPostInput
  create: UserCreateWithoutBlogPostsInput
  update: UserUpdateWithoutBlogPostsDataInput
  upsert: UserUpsertWithoutBlogPostsInput
}

input UserUpdateOneWithoutCartInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCartInput
  create: UserCreateWithoutCartInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutCartDataInput
  upsert: UserUpsertWithoutCartInput
}

input UserUpdateWithoutBlogPostsDataInput {
  cart: CartUpdateOneWithoutUserInput
  email: String
  id: String
  password: String
  roles: UserRoleUpdateManyWithoutUsersInput
}

input UserUpdateWithoutCartDataInput {
  blogPosts: BlogPostUpdateManyWithoutAuthorInput
  email: String
  id: String
  password: String
  roles: UserRoleUpdateManyWithoutUsersInput
}

input UserUpdateWithoutRolesDataInput {
  blogPosts: BlogPostUpdateManyWithoutAuthorInput
  cart: CartUpdateOneWithoutUserInput
  email: String
  id: String
  password: String
}

input UserUpdateWithWhereUniqueWithoutRolesInput {
  data: UserUpdateWithoutRolesDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithoutBlogPostsInput {
  create: UserCreateWithoutBlogPostsInput!
  update: UserUpdateWithoutBlogPostsDataInput!
}

input UserUpsertWithoutCartInput {
  create: UserCreateWithoutCartInput!
  update: UserUpdateWithoutCartDataInput!
}

input UserUpsertWithWhereUniqueWithoutRolesInput {
  create: UserCreateWithoutRolesInput!
  update: UserUpdateWithoutRolesDataInput!
  where: UserWhereUniqueInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  blogPosts: BlogPostFilter
  cart: CartWhereInput
  email: StringFilter
  id: UUIDFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  password: StringFilter
  roles: UserRoleFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
}

scalar UUID

input UUIDFilter {
  contains: UUID
  endsWith: UUID
  equals: UUID
  gt: UUID
  gte: UUID
  in: [UUID!]
  lt: UUID
  lte: UUID
  not: UUID
  notIn: [UUID!]
  startsWith: UUID
}
