### This file was generated by Nexus Schema
### Do not make changes to this file directly


type BlogPost {
  description: String!
  id: Int!
  published: Boolean!
  title: String!
  user: User!
}

input BlogPostCreateInput {
  description: String!
  published: Boolean
  title: String!
  user: UserCreateOneWithoutBlogPostsInput!
}

input BlogPostCreateManyWithoutUserInput {
  connect: [BlogPostWhereUniqueInput!]
  create: [BlogPostCreateWithoutUserInput!]
}

input BlogPostCreateWithoutUserInput {
  description: String!
  published: Boolean
  title: String!
}

input BlogPostFilter {
  every: BlogPostWhereInput
  none: BlogPostWhereInput
  some: BlogPostWhereInput
}

input BlogPostWhereInput {
  AND: [BlogPostWhereInput!]
  description: StringFilter
  id: IntFilter
  NOT: [BlogPostWhereInput!]
  OR: [BlogPostWhereInput!]
  published: BooleanFilter
  title: StringFilter
  user: UserWhereInput
  userId: StringFilter
}

input BlogPostWhereUniqueInput {
  id: Int
}

input BooleanFilter {
  equals: Boolean
  not: Boolean
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

"""
The `JSON` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json

type LoginResult {
  user: User
}

type Mutation {
  createOneBlogPost(data: BlogPostCreateInput!): BlogPost!
  createOneUser(data: UserCreateInput!): User!
  login(email: String!, password: String!): LoginResult
  logout: Boolean
  signup(email: String!, password: String!): SignupResult
}

type Query {
  adminBlogPosts(after: BlogPostWhereUniqueInput, before: BlogPostWhereUniqueInput, first: Int, last: Int, where: BlogPostWhereInput): [BlogPost!]!
  blogPostsPublic(after: BlogPostWhereUniqueInput, before: BlogPostWhereUniqueInput, first: Int, last: Int, where: BlogPostWhereInput): [BlogPost!]!
  me: User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
}

type SignupResult {
  user: User
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  blogPosts(after: BlogPostWhereUniqueInput, before: BlogPostWhereUniqueInput, first: Int, last: Int): [BlogPost!]!
  email: String!
  id: String!
  roles(after: UserRoleWhereUniqueInput, before: UserRoleWhereUniqueInput, first: Int, last: Int): [UserRole!]!
}

input UserCreateInput {
  blogPosts: BlogPostCreateManyWithoutUserInput
  email: String!
  id: String
  password: String!
  roles: UserRoleCreateManyWithoutUsersInput
}

input UserCreateOneWithoutBlogPostsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutBlogPostsInput
}

input UserCreateWithoutBlogPostsInput {
  email: String!
  id: String
  password: String!
  roles: UserRoleCreateManyWithoutUsersInput
}

input UserFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

type UserRole {
  id: String!
}

input UserRoleCreateManyWithoutUsersInput {
  connect: [UserRoleWhereUniqueInput!]
  create: [UserRoleCreateWithoutUsersInput!]
}

input UserRoleCreateWithoutUsersInput {
  id: String!
}

input UserRoleFilter {
  every: UserRoleWhereInput
  none: UserRoleWhereInput
  some: UserRoleWhereInput
}

input UserRoleWhereInput {
  AND: [UserRoleWhereInput!]
  id: StringFilter
  NOT: [UserRoleWhereInput!]
  OR: [UserRoleWhereInput!]
  users: UserFilter
}

input UserRoleWhereUniqueInput {
  id: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  blogPosts: BlogPostFilter
  email: StringFilter
  id: UUIDFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  password: StringFilter
  roles: UserRoleFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
}

scalar UUID

input UUIDFilter {
  contains: UUID
  endsWith: UUID
  equals: UUID
  gt: UUID
  gte: UUID
  in: [UUID!]
  lt: UUID
  lte: UUID
  not: UUID
  notIn: [UUID!]
  startsWith: UUID
}
