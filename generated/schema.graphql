### This file was generated by Nexus Schema
### Do not make changes to this file directly


type BatchPayload {
  count: Int!
}

type BlogPost {
  author: User!
  content: Json
  id: String!
  published: Boolean!
  title: String!
}

input BlogPostCreateInput {
  author: UserCreateOneWithoutBlogPostsInput!
  content: String
  id: String
  published: Boolean
  title: String!
}

input BlogPostCreateManyWithoutAuthorInput {
  connect: [BlogPostWhereUniqueInput!]
  connectOrCreate: [BlogPostCreateOrConnectWithoutauthorInput!]
  create: [BlogPostCreateWithoutAuthorInput!]
}

input BlogPostCreateOrConnectWithoutauthorInput {
  create: BlogPostCreateWithoutAuthorInput!
  where: BlogPostWhereUniqueInput!
}

input BlogPostCreateWithoutAuthorInput {
  content: String
  id: String
  published: Boolean
  title: String!
}

input BlogPostListRelationFilter {
  every: BlogPostWhereInput
  none: BlogPostWhereInput
  some: BlogPostWhereInput
}

input BlogPostOrderByInput {
  authorId: SortOrder
  content: SortOrder
  id: SortOrder
  published: SortOrder
  title: SortOrder
}

input BlogPostScalarWhereInput {
  AND: [BlogPostScalarWhereInput!]
  authorId: StringFilter
  content: StringNullableFilter
  id: StringFilter
  NOT: [BlogPostScalarWhereInput!]
  OR: [BlogPostScalarWhereInput!]
  published: BoolFilter
  title: StringFilter
}

input BlogPostUpdateInput {
  author: UserUpdateOneRequiredWithoutBlogPostsInput
  content: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input BlogPostUpdateManyMutationInput {
  content: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input BlogPostUpdateManyWithoutAuthorInput {
  connect: [BlogPostWhereUniqueInput!]
  connectOrCreate: [BlogPostCreateOrConnectWithoutauthorInput!]
  create: [BlogPostCreateWithoutAuthorInput!]
  delete: [BlogPostWhereUniqueInput!]
  deleteMany: [BlogPostScalarWhereInput!]
  disconnect: [BlogPostWhereUniqueInput!]
  set: [BlogPostWhereUniqueInput!]
  update: [BlogPostUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [BlogPostUpdateManyWithWhereWithoutAuthorInput!]
  upsert: [BlogPostUpsertWithWhereUniqueWithoutAuthorInput!]
}

input BlogPostUpdateManyWithWhereWithoutAuthorInput {
  data: BlogPostUpdateManyMutationInput!
  where: BlogPostScalarWhereInput!
}

input BlogPostUpdateWithoutAuthorInput {
  content: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input BlogPostUpdateWithWhereUniqueWithoutAuthorInput {
  data: BlogPostUpdateWithoutAuthorInput!
  where: BlogPostWhereUniqueInput!
}

input BlogPostUpsertWithWhereUniqueWithoutAuthorInput {
  create: BlogPostCreateWithoutAuthorInput!
  update: BlogPostUpdateWithoutAuthorInput!
  where: BlogPostWhereUniqueInput!
}

input BlogPostWhereInput {
  AND: [BlogPostWhereInput!]
  author: UserWhereInput
  authorId: StringFilter
  content: StringNullableFilter
  id: StringFilter
  NOT: [BlogPostWhereInput!]
  OR: [BlogPostWhereInput!]
  published: BoolFilter
  title: StringFilter
}

input BlogPostWhereUniqueInput {
  id: String
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

scalar Json

type LoginResult {
  user: User
}

type Mutation {
  adminCreateOneBlogPost(data: BlogPostCreateInput!): BlogPost!
  adminCreateOnePage(data: PageCreateInput!): Page!
  adminCreateOneUser(data: UserCreateInput!): User!
  adminCreateOneUserRole(data: UserRoleCreateInput!): UserRole!
  adminDeleteManyBlogPost(where: BlogPostWhereInput): BatchPayload!
  adminDeleteManyPage(where: PageWhereInput): BatchPayload!
  adminDeleteManyUser(where: UserWhereInput): BatchPayload!
  adminDeleteManyUserRole(where: UserRoleWhereInput): BatchPayload!
  adminDeleteOneBlogPost(where: BlogPostWhereUniqueInput!): BlogPost
  adminDeleteOnePage(where: PageWhereUniqueInput!): Page
  adminDeleteOneUser(where: UserWhereUniqueInput!): User
  adminDeleteOneUserRole(where: UserRoleWhereUniqueInput!): UserRole
  adminUpdateManyBlogPost(data: BlogPostUpdateManyMutationInput!, where: BlogPostWhereInput): BatchPayload!
  adminUpdateManyPage(data: PageUpdateManyMutationInput!, where: PageWhereInput): BatchPayload!
  adminUpdateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  adminUpdateManyUserRole(data: UserRoleUpdateManyMutationInput!, where: UserRoleWhereInput): BatchPayload!
  adminUpdateOneBlogPost(data: BlogPostUpdateInput!, where: BlogPostWhereUniqueInput!): BlogPost
  adminUpdateOnePage(data: PageUpdateInput!, where: PageWhereUniqueInput!): Page
  adminUpdateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  adminUpdateOneUserRole(data: UserRoleUpdateInput!, where: UserRoleWhereUniqueInput!): UserRole
  adminUploadFile(file: Upload, fileName: String, folderName: String): String
  adminUpsertOneBlogPost(create: BlogPostCreateInput!, update: BlogPostUpdateInput!, where: BlogPostWhereUniqueInput!): BlogPost!
  adminUpsertOnePage(create: PageCreateInput!, update: PageUpdateInput!, where: PageWhereUniqueInput!): Page!
  adminUpsertOneUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  adminUpsertOneUserRole(create: UserRoleCreateInput!, update: UserRoleUpdateInput!, where: UserRoleWhereUniqueInput!): UserRole!
  login(email: String!, password: String!): LoginResult
  logout: Boolean
  signup(email: String!, password: String!): SignupResult
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableBoolFieldUpdateOperationsInput {
  set: Boolean
}

input NullableIntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Page {
  childPages(cursor: PageWhereUniqueInput, orderBy: [PageOrderByInput!], skip: Int, take: Int): [Page!]!
  content: Json
  htmlTitle: String!
  htmlTitle_de: String
  htmlTitle_en: String
  id: String!
  meta_description: String!
  meta_description_de: String
  meta_description_en: String
  navigationTitle: String!
  navigationTitle_de: String
  navigationTitle_en: String
  parentPage: Page
  path: String
  published: Boolean
  slug: String!
  social_description: String!
  social_description_de: String
  social_description_en: String
  social_title: String!
  social_title_de: String
  social_title_en: String
  sortKey: Int
}

input PageCreateInput {
  childPages: PageCreateManyWithoutParentPageInput
  content: String
  createdAt: DateTime
  htmlTitle_de: String
  htmlTitle_en: String
  id: String
  meta_description_de: String
  meta_description_en: String
  navigationTitle_de: String
  navigationTitle_en: String!
  parentPage: PageCreateOneWithoutChildPagesInput
  published: Boolean
  slug: String!
  social_description_de: String
  social_description_en: String
  social_title_de: String
  social_title_en: String
  sortKey: Int
}

input PageCreateManyWithoutParentPageInput {
  connect: [PageWhereUniqueInput!]
  connectOrCreate: [PageCreateOrConnectWithoutparentPageInput!]
  create: [PageCreateWithoutParentPageInput!]
}

input PageCreateOneWithoutChildPagesInput {
  connect: PageWhereUniqueInput
  connectOrCreate: PageCreateOrConnectWithoutchildPagesInput
  create: PageCreateWithoutChildPagesInput
}

input PageCreateOrConnectWithoutchildPagesInput {
  create: PageCreateWithoutChildPagesInput!
  where: PageWhereUniqueInput!
}

input PageCreateOrConnectWithoutparentPageInput {
  create: PageCreateWithoutParentPageInput!
  where: PageWhereUniqueInput!
}

input PageCreateWithoutChildPagesInput {
  content: String
  createdAt: DateTime
  htmlTitle_de: String
  htmlTitle_en: String
  id: String
  meta_description_de: String
  meta_description_en: String
  navigationTitle_de: String
  navigationTitle_en: String!
  parentPage: PageCreateOneWithoutChildPagesInput
  path: String
  published: Boolean
  slug: String!
  social_description_de: String
  social_description_en: String
  social_title_de: String
  social_title_en: String
  sortKey: Int
}

input PageCreateWithoutParentPageInput {
  childPages: PageCreateManyWithoutParentPageInput
  content: String
  createdAt: DateTime
  htmlTitle_de: String
  htmlTitle_en: String
  id: String
  meta_description_de: String
  meta_description_en: String
  navigationTitle_de: String
  navigationTitle_en: String!
  path: String
  published: Boolean
  slug: String!
  social_description_de: String
  social_description_en: String
  social_title_de: String
  social_title_en: String
  sortKey: Int
}

input PageListRelationFilter {
  every: PageWhereInput
  none: PageWhereInput
  some: PageWhereInput
}

input PageOrderByInput {
  content: SortOrder
  createdAt: SortOrder
  htmlTitle_de: SortOrder
  htmlTitle_en: SortOrder
  id: SortOrder
  meta_description_de: SortOrder
  meta_description_en: SortOrder
  navigationTitle_de: SortOrder
  navigationTitle_en: SortOrder
  parentPageId: SortOrder
  path: SortOrder
  published: SortOrder
  slug: SortOrder
  social_description_de: SortOrder
  social_description_en: SortOrder
  social_title_de: SortOrder
  social_title_en: SortOrder
  sortKey: SortOrder
}

input PageScalarWhereInput {
  AND: [PageScalarWhereInput!]
  content: StringNullableFilter
  createdAt: DateTimeFilter
  htmlTitle_de: StringNullableFilter
  htmlTitle_en: StringNullableFilter
  id: StringFilter
  meta_description_de: StringNullableFilter
  meta_description_en: StringNullableFilter
  navigationTitle_de: StringNullableFilter
  navigationTitle_en: StringFilter
  NOT: [PageScalarWhereInput!]
  OR: [PageScalarWhereInput!]
  parentPageId: StringNullableFilter
  path: StringNullableFilter
  published: BoolNullableFilter
  slug: StringFilter
  social_description_de: StringNullableFilter
  social_description_en: StringNullableFilter
  social_title_de: StringNullableFilter
  social_title_en: StringNullableFilter
  sortKey: IntNullableFilter
}

input PageUpdateInput {
  childPages: PageUpdateManyWithoutParentPageInput
  content: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  htmlTitle_de: NullableStringFieldUpdateOperationsInput
  htmlTitle_en: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  meta_description_de: NullableStringFieldUpdateOperationsInput
  meta_description_en: NullableStringFieldUpdateOperationsInput
  navigationTitle_de: NullableStringFieldUpdateOperationsInput
  navigationTitle_en: StringFieldUpdateOperationsInput
  parentPage: PageUpdateOneWithoutChildPagesInput
  published: NullableBoolFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  social_description_de: NullableStringFieldUpdateOperationsInput
  social_description_en: NullableStringFieldUpdateOperationsInput
  social_title_de: NullableStringFieldUpdateOperationsInput
  social_title_en: NullableStringFieldUpdateOperationsInput
  sortKey: NullableIntFieldUpdateOperationsInput
}

input PageUpdateManyMutationInput {
  content: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  htmlTitle_de: NullableStringFieldUpdateOperationsInput
  htmlTitle_en: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  meta_description_de: NullableStringFieldUpdateOperationsInput
  meta_description_en: NullableStringFieldUpdateOperationsInput
  navigationTitle_de: NullableStringFieldUpdateOperationsInput
  navigationTitle_en: StringFieldUpdateOperationsInput
  path: NullableStringFieldUpdateOperationsInput
  published: NullableBoolFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  social_description_de: NullableStringFieldUpdateOperationsInput
  social_description_en: NullableStringFieldUpdateOperationsInput
  social_title_de: NullableStringFieldUpdateOperationsInput
  social_title_en: NullableStringFieldUpdateOperationsInput
  sortKey: NullableIntFieldUpdateOperationsInput
}

input PageUpdateManyWithoutParentPageInput {
  connect: [PageWhereUniqueInput!]
  connectOrCreate: [PageCreateOrConnectWithoutparentPageInput!]
  create: [PageCreateWithoutParentPageInput!]
  delete: [PageWhereUniqueInput!]
  deleteMany: [PageScalarWhereInput!]
  disconnect: [PageWhereUniqueInput!]
  set: [PageWhereUniqueInput!]
  update: [PageUpdateWithWhereUniqueWithoutParentPageInput!]
  updateMany: [PageUpdateManyWithWhereWithoutParentPageInput!]
  upsert: [PageUpsertWithWhereUniqueWithoutParentPageInput!]
}

input PageUpdateManyWithWhereWithoutParentPageInput {
  data: PageUpdateManyMutationInput!
  where: PageScalarWhereInput!
}

input PageUpdateOneWithoutChildPagesInput {
  connect: PageWhereUniqueInput
  connectOrCreate: PageCreateOrConnectWithoutchildPagesInput
  create: PageCreateWithoutChildPagesInput
  delete: Boolean
  disconnect: Boolean
  update: PageUpdateWithoutChildPagesInput
  upsert: PageUpsertWithoutChildPagesInput
}

input PageUpdateWithoutChildPagesInput {
  content: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  htmlTitle_de: NullableStringFieldUpdateOperationsInput
  htmlTitle_en: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  meta_description_de: NullableStringFieldUpdateOperationsInput
  meta_description_en: NullableStringFieldUpdateOperationsInput
  navigationTitle_de: NullableStringFieldUpdateOperationsInput
  navigationTitle_en: StringFieldUpdateOperationsInput
  parentPage: PageUpdateOneWithoutChildPagesInput
  path: NullableStringFieldUpdateOperationsInput
  published: NullableBoolFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  social_description_de: NullableStringFieldUpdateOperationsInput
  social_description_en: NullableStringFieldUpdateOperationsInput
  social_title_de: NullableStringFieldUpdateOperationsInput
  social_title_en: NullableStringFieldUpdateOperationsInput
  sortKey: NullableIntFieldUpdateOperationsInput
}

input PageUpdateWithoutParentPageInput {
  childPages: PageUpdateManyWithoutParentPageInput
  content: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  htmlTitle_de: NullableStringFieldUpdateOperationsInput
  htmlTitle_en: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  meta_description_de: NullableStringFieldUpdateOperationsInput
  meta_description_en: NullableStringFieldUpdateOperationsInput
  navigationTitle_de: NullableStringFieldUpdateOperationsInput
  navigationTitle_en: StringFieldUpdateOperationsInput
  path: NullableStringFieldUpdateOperationsInput
  published: NullableBoolFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  social_description_de: NullableStringFieldUpdateOperationsInput
  social_description_en: NullableStringFieldUpdateOperationsInput
  social_title_de: NullableStringFieldUpdateOperationsInput
  social_title_en: NullableStringFieldUpdateOperationsInput
  sortKey: NullableIntFieldUpdateOperationsInput
}

input PageUpdateWithWhereUniqueWithoutParentPageInput {
  data: PageUpdateWithoutParentPageInput!
  where: PageWhereUniqueInput!
}

input PageUpsertWithoutChildPagesInput {
  create: PageCreateWithoutChildPagesInput!
  update: PageUpdateWithoutChildPagesInput!
}

input PageUpsertWithWhereUniqueWithoutParentPageInput {
  create: PageCreateWithoutParentPageInput!
  update: PageUpdateWithoutParentPageInput!
  where: PageWhereUniqueInput!
}

input PageWhereInput {
  AND: [PageWhereInput!]
  childPages: PageListRelationFilter
  content: StringNullableFilter
  createdAt: DateTimeFilter
  htmlTitle_de: StringNullableFilter
  htmlTitle_en: StringNullableFilter
  id: StringFilter
  meta_description_de: StringNullableFilter
  meta_description_en: StringNullableFilter
  navigationTitle_de: StringNullableFilter
  navigationTitle_en: StringFilter
  NOT: [PageWhereInput!]
  OR: [PageWhereInput!]
  parentPage: PageWhereInput
  parentPageId: StringNullableFilter
  path: StringNullableFilter
  published: BoolNullableFilter
  slug: StringFilter
  social_description_de: StringNullableFilter
  social_description_en: StringNullableFilter
  social_title_de: StringNullableFilter
  social_title_en: StringNullableFilter
  sortKey: IntNullableFilter
}

input PageWhereUniqueInput {
  id: String
  parentPageId_slug: ParentPageIdSlugCompoundUniqueInput
  path: String
}

input ParentPageIdSlugCompoundUniqueInput {
  parentPageId: String!
  slug: String!
}

type Query {
  adminBlogPost(where: BlogPostWhereUniqueInput!): BlogPost
  adminBlogPosts(cursor: BlogPostWhereUniqueInput, orderBy: [BlogPostOrderByInput!], skip: Int, take: Int, where: BlogPostWhereInput): [BlogPost!]!
  adminBlogPostsCount(cursor: BlogPostWhereUniqueInput, orderBy: BlogPostOrderByInput, skip: Int, take: Int, where: BlogPostWhereInput): Int
  adminPage(where: PageWhereUniqueInput!): Page
  adminPages(cursor: PageWhereUniqueInput, orderBy: [PageOrderByInput!], skip: Int, take: Int, where: PageWhereInput): [Page!]!
  adminPagesCount(cursor: PageWhereUniqueInput, orderBy: PageOrderByInput, skip: Int, take: Int, where: PageWhereInput): Int
  adminUser(where: UserWhereUniqueInput!): User
  adminUserRole(where: UserRoleWhereUniqueInput!): UserRole
  adminUserRoles(cursor: UserRoleWhereUniqueInput, orderBy: [UserRoleOrderByInput!], skip: Int, take: Int, where: UserRoleWhereInput): [UserRole!]!
  adminUserRolesCount(cursor: UserRoleWhereUniqueInput, orderBy: UserRoleOrderByInput, skip: Int, take: Int, where: UserRoleWhereInput): Int
  adminUsers(cursor: UserWhereUniqueInput, orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
  adminUsersCount(cursor: UserWhereUniqueInput, orderBy: UserOrderByInput, skip: Int, take: Int, where: UserWhereInput): Int
  blogPosts(cursor: BlogPostWhereUniqueInput, skip: Int, take: Int, where: BlogPostWhereInput): [BlogPost!]!
  me: User
  page(pageId: String, path: String): Page
  pages(parentPageId: String, parentPath: String): [Page]
}

type SignupResult {
  user: User
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  blogPosts(cursor: BlogPostWhereUniqueInput, skip: Int, take: Int): [BlogPost!]!
  email: String!
  id: String!
  roles(cursor: UserRoleWhereUniqueInput, skip: Int, take: Int): [UserRole!]!
}

input UserCreateInput {
  blogPosts: BlogPostCreateManyWithoutAuthorInput
  email: String!
  id: String
  password: String!
  roles: UserRoleCreateManyWithoutUsersInput
}

input UserCreateManyWithoutRolesInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutrolesInput!]
  create: [UserCreateWithoutRolesInput!]
}

input UserCreateOneWithoutBlogPostsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutblogPostsInput
  create: UserCreateWithoutBlogPostsInput
}

input UserCreateOrConnectWithoutblogPostsInput {
  create: UserCreateWithoutBlogPostsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutrolesInput {
  create: UserCreateWithoutRolesInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutBlogPostsInput {
  email: String!
  id: String
  password: String!
  roles: UserRoleCreateManyWithoutUsersInput
}

input UserCreateWithoutRolesInput {
  blogPosts: BlogPostCreateManyWithoutAuthorInput
  email: String!
  id: String
  password: String!
}

input UserListRelationFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserOrderByInput {
  email: SortOrder
  id: SortOrder
  password: SortOrder
}

type UserRole {
  id: String!
  users(cursor: UserWhereUniqueInput, skip: Int, take: Int): [User!]!
}

input UserRoleCreateInput {
  id: String!
  users: UserCreateManyWithoutRolesInput
}

input UserRoleCreateManyWithoutUsersInput {
  connect: [UserRoleWhereUniqueInput!]
  connectOrCreate: [UserRoleCreateOrConnectWithoutusersInput!]
  create: [UserRoleCreateWithoutUsersInput!]
}

input UserRoleCreateOrConnectWithoutusersInput {
  create: UserRoleCreateWithoutUsersInput!
  where: UserRoleWhereUniqueInput!
}

input UserRoleCreateWithoutUsersInput {
  id: String!
}

input UserRoleListRelationFilter {
  every: UserRoleWhereInput
  none: UserRoleWhereInput
  some: UserRoleWhereInput
}

input UserRoleOrderByInput {
  id: SortOrder
}

input UserRoleScalarWhereInput {
  AND: [UserRoleScalarWhereInput!]
  id: StringFilter
  NOT: [UserRoleScalarWhereInput!]
  OR: [UserRoleScalarWhereInput!]
}

input UserRoleUpdateInput {
  id: StringFieldUpdateOperationsInput
  users: UserUpdateManyWithoutRolesInput
}

input UserRoleUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
}

input UserRoleUpdateManyWithoutUsersInput {
  connect: [UserRoleWhereUniqueInput!]
  connectOrCreate: [UserRoleCreateOrConnectWithoutusersInput!]
  create: [UserRoleCreateWithoutUsersInput!]
  delete: [UserRoleWhereUniqueInput!]
  deleteMany: [UserRoleScalarWhereInput!]
  disconnect: [UserRoleWhereUniqueInput!]
  set: [UserRoleWhereUniqueInput!]
  update: [UserRoleUpdateWithWhereUniqueWithoutUsersInput!]
  updateMany: [UserRoleUpdateManyWithWhereWithoutUsersInput!]
  upsert: [UserRoleUpsertWithWhereUniqueWithoutUsersInput!]
}

input UserRoleUpdateManyWithWhereWithoutUsersInput {
  data: UserRoleUpdateManyMutationInput!
  where: UserRoleScalarWhereInput!
}

input UserRoleUpdateWithoutUsersInput {
  id: StringFieldUpdateOperationsInput
}

input UserRoleUpdateWithWhereUniqueWithoutUsersInput {
  data: UserRoleUpdateWithoutUsersInput!
  where: UserRoleWhereUniqueInput!
}

input UserRoleUpsertWithWhereUniqueWithoutUsersInput {
  create: UserRoleCreateWithoutUsersInput!
  update: UserRoleUpdateWithoutUsersInput!
  where: UserRoleWhereUniqueInput!
}

input UserRoleWhereInput {
  AND: [UserRoleWhereInput!]
  id: StringFilter
  NOT: [UserRoleWhereInput!]
  OR: [UserRoleWhereInput!]
  users: UserListRelationFilter
}

input UserRoleWhereUniqueInput {
  id: String
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput!]
  email: StringFilter
  id: StringFilter
  NOT: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  password: StringFilter
}

input UserUpdateInput {
  blogPosts: BlogPostUpdateManyWithoutAuthorInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  roles: UserRoleUpdateManyWithoutUsersInput
}

input UserUpdateManyMutationInput {
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
}

input UserUpdateManyWithoutRolesInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutrolesInput!]
  create: [UserCreateWithoutRolesInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutRolesInput!]
  updateMany: [UserUpdateManyWithWhereWithoutRolesInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutRolesInput!]
}

input UserUpdateManyWithWhereWithoutRolesInput {
  data: UserUpdateManyMutationInput!
  where: UserScalarWhereInput!
}

input UserUpdateOneRequiredWithoutBlogPostsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutblogPostsInput
  create: UserCreateWithoutBlogPostsInput
  update: UserUpdateWithoutBlogPostsInput
  upsert: UserUpsertWithoutBlogPostsInput
}

input UserUpdateWithoutBlogPostsInput {
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  roles: UserRoleUpdateManyWithoutUsersInput
}

input UserUpdateWithoutRolesInput {
  blogPosts: BlogPostUpdateManyWithoutAuthorInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
}

input UserUpdateWithWhereUniqueWithoutRolesInput {
  data: UserUpdateWithoutRolesInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithoutBlogPostsInput {
  create: UserCreateWithoutBlogPostsInput!
  update: UserUpdateWithoutBlogPostsInput!
}

input UserUpsertWithWhereUniqueWithoutRolesInput {
  create: UserCreateWithoutRolesInput!
  update: UserUpdateWithoutRolesInput!
  where: UserWhereUniqueInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  blogPosts: BlogPostListRelationFilter
  email: StringFilter
  id: StringFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  password: StringFilter
  roles: UserRoleListRelationFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
}
